性能优化
    . 本身就是一个综合性的问题
    . 没有标准答案，如果要非常全面，能写一本书...
    . 只关注核心点，针对页面

原则
    . 多使用内存、缓存或者其它方法
    . 减少CPU计算、减少网络请求

从哪里入手
    . 加载页面和静态资源
        (1)静态资源的合并与压缩
          在webpack环节中，讲到把多个文件合并成一个文件，并且进行了压缩。
          分析：如果不合并，比如，有3个js文件，则需要3次网络请求，耗费性能。
               但是如果合并成一个js文件，则只需要耗费一次网络开销，加载资源变快。

        (2)静态资源缓存      

        (3)使用CDN让资源加载更快
            因为CDN它是一个不同区域的网络优化

        (4) 使用 SSR 后端渲染，数据直接输出到HTML中
          分析：不是通过先下载html,然后再通过ajax请求数据，再渲染到页面中的方式。
                不需要通过网络请求数据。
             . 现在的vue react提出了这样的概念   
             . 其实jsp,php,asp都属于后端渲染

    . 页面渲染    
        (1) CSS放前面，JS放后面
        (2) 懒加载（图片懒加载，下拉加载更多）
        (3) 减少DOM查询，对DOM查询做缓存
        (4) 减少DOM操作，多个操作尽量合并在一起执行。
            记住：DOM操作是非常非常昂贵的。
        (5) 事件节流
        (6) 尽早执行操作（如DOMContentLoaded）    
