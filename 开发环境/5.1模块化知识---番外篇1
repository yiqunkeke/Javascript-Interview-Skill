https://juejin.im/post/5c17ad756fb9a049ff4e0a62

1. 模块化的好处：
    . 避免命名冲突
    . 更好的分离，按需加载
    . 更高复用性
    . 高可维护性

2. 引入多个<script>后出现的问题：
    . 请求过多
        我们要依赖多个模块，那样就会发送多个请求，导致请求过多
    . 依赖模糊
        我们不知道他们的具体依赖关系是什么，
        也可能会因此导致加载先后顺序出错。
    . 难以维护
        .以上两个原因导致很难维护，很可能出现牵一发而动全身的情况，
        导致项目出现严重的问题。

3. 模块化规范： CommonJs、AMD、ES6、CMD
    . CommonJs
        Node 应用由模块组成，采用 CommonJs 模块规范。
        每个文件就是一个模块，有自己的作用域。
        在一个文件里面定义的变量，函数，类，都是私有的，对其它文件不可见。

        在服务器端，模块的加载是"运行时"-"同步加载"
        在浏览器端，模块需要"提前编译打包"处理。    

        特点：
        . 所有代码都运行在模块作用域，不会污染全局作用域。
        . 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了。
          以后再加载，就直接读取缓存结果。要想模块再次运行，必须清除缓存。  
        . 模块加载的顺序，按照其在代码中出现的顺序。      

        基本语法：（重点！！！）
        . 暴露模块 
            module.exports = vaule
            或 exports.xxx = value      
        . 引入模块
            使用require(xxx)
            如果是第三方模块，xxx为模块名
            如果是自定义模块，xxx为模块文件路径。
        . 加载机制
            CommonJs模块的加载机制是：输入的是被输出的值的拷贝。
            也就是说一旦输出一个值，模块内部的变化就影响不到这个值。
            除非写成一个函数，才能得到内部变动后的值。
        . 服务端实现
            1. 下载安装node.js
            2. 创建项目结构（使用 npm init命令）  
            3. 下载第三方模块
                npm install uniq --save // 用于数组去重
            4. 定义模块代码
                // m1.js
                module.exports = {
                    msg: 'module1',
                    foo(){
                        console.log(this.msg)
                    }
                }    

                // m2.js
                module.exports = {
                    console.log('module2')
                }  

                // m3.js
                exports.foo = function() {
                    console.log('foo() module3')
                }
                exports.arr = [1,2,3,3,2]
                
                let uniq = require('uniq')
                let module1 = require('./m1') 
                let module2 = require('./m2')   
                let module3 = require('./m3')   

                module1.foo() //module1
                module2() // module2
                module3.foo() // foo() module3
                console.log(uniq(module3.arr)) //[1, 2, 3]